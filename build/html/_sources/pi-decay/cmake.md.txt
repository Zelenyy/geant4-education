# Сборка проекта при помощи cmake

## Hello world

Создадим в рабочей директории два файла: `main.cc` и `CMakeLists.txt` (если вы находитесь в консоли, используйте команду `touch main.cc CMakeLists.txt`).

В файле `main.cc` напишем:
```cpp
#include <iostream>

int main(int argc,char** argv)
{
  std::cout<<"Hello world"<< std::endl;
  return 0;
}
```
А в файле `CMakeLists.txt`:
```
cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
project(pi-decay)
add_executable(pi-decay main.cc)
```
Разберем, что значат эти строки:
 * `cmake_minimum_required(VERSION 3.8 FATAL_ERROR)` --- устанавливает минимальную версию cmake используемую в проекте.
 * `project(pi-decay)` --- задает имя проекта, которое используется как `cmake`, так и внешними программами, например, IDE.
 * `add_executable(pi-decay main.cc` ---  добаляет задание на создание испольняемого файл  с именем `pi-deacy`, используя код из файла `main.cc`.

 Теперь попробуем собрать проект, для этого мы создадим отдельную директорию в которой будет происходить сборка проекта, такую директорию обычно называют `build`. Никогда не собирайте проект прямо в той же директории где лежат файлы с кодом --- запаритесь потом отделять зерна от плевел, создайте поддиректорию, её при необходимости будет легко удалить.
 
 ```bash
 mkdir build && cd build
 ```
Затем запустите `cmake` в директории `build`, указав путь к директории с кодом.
```
cmake path/to/code
```
`cmake` сгенерирует файл `Makefile`, который будет использован программой `make` для сборки проекта. Выполните `make` в папке `build`
```
make
```
Готово, в директории должен появится файл `pi-decay`, который можно запустить:
```
./pi-decay
```

 

